@model CategoryListViewModel
@{
    object LoadSubMenu(Category category, ICollection<Category> categories)
    {
        foreach (Category subCategory in categories)
        {
            ICollection<Category> localcategories = Model.GetCategoryies(subCategory.id);
            ICollection<Product> products = Model.AllProduct.Where(x => x.Categoryid == subCategory.id).ToList();
            if (localcategories.Count > 0)
            {
                <li class="drop-down">
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(subCategory.Name) , page=1 , category=subCategory.id})">@subCategory.Name</a>
                    <ul>
                        @LoadSubMenu(subCategory, localcategories)
                        @if (products.Count > 0)
                        {
                            @LoadProduct(subCategory, products)
                        }
                    </ul>
                </li>
            }
            else if (products.Count > 0)
            {
                <li class="drop-down">
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(subCategory.Name) , page=1 , category=subCategory.id})">@subCategory.Name</a>
                    <ul>
                        @LoadProduct(category, products)
                    </ul>
                </li>
            }
            else
            {
                <li>
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(subCategory.Name) , page=1 , category=subCategory.id})">@subCategory.Name</a>
                </li>
            }

        }
        return null;
    }

    object LoadProduct(Category category, ICollection<Product> products)
    {
        foreach (Product product in products)
        {
            <li>
                <a href="@Url.Action("ProductDetail","Detail",new { produtname=GetFriendlyTitle(product.SupTitle) , id=product.id})">@product.SupTitle</a>
            </li>
        }
        return null;
    }

}
@{

    foreach (Category MainCategory in Model.MainCategories)
    {
        ICollection<Product> products = Model.AllProduct.Where(x => x.Categoryid == MainCategory.id).ToList();

        if (MainCategory.Name == "ROOT")
        {
            @LoadProduct(MainCategory, products)
        }
        else
        {
            ICollection<Category> categories = Model.GetCategoryies(MainCategory.id);
            if (categories.Count > 0)
            {
                <li class="drop-down">
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(MainCategory.Name) , page=1 , category=MainCategory.id})">@MainCategory.Name</a>
                    <ul>
                        @LoadSubMenu(MainCategory, categories)
                        @if (products.Count > 0)
                        {
                            @LoadProduct(MainCategory, products)
                        }
                    </ul>
                </li>
            }
            else if (products.Count > 0)
            {
                <li class="drop-down">
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(MainCategory.Name) , page=1 , category=MainCategory.id})">@MainCategory.Name</a>
                    <ul>
                        @LoadProduct(MainCategory, products)
                    </ul>
                </li>
            }
            else
            {
                <li>
                    <a href="@Url.Action("CategoryDetail","Detail", new { categoryName=GetFriendlyTitle(MainCategory.Name) , page=1 , category=MainCategory.id})">@MainCategory.Name</a>
                </li>
            }

        }

    }

}
